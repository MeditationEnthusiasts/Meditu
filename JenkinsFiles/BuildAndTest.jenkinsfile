@Library( "X13JenkinsLib" )_

def CallCake( String arguments )
{
    X13Cmd( "${X13PathCombine( "Cake", "dotnet-cake" )} ${X13PathCombine( "checkout", "build.cake" )} ${arguments}" );
}

def CallDevops( String arguments )
{
    X13Cmd( "dotnet ${X13PathCombine( "checkout", "src", "DevOps", "bin", "Debug", "net6.0", "DevOps.dll" )} ${arguments}" );
}

def Prepare()
{
    X13Cmd( "dotnet tool update electronnet.cli --tool-path electron" );
    X13Cmd( "dotnet tool update Cake.Tool --tool-path Cake" );
    CallCake( "--showdescription" );
}

def Build()
{
    CallCake( "--target=build" );
}

def RunUnitTests()
{
    CallDevops( "--target=unit_test" );
}

def GetVersFile()
{
    return "version.txt";
}

def GetVersion()
{
    return readFile( GetVersFile() );
}

def GetElectronPath()
{
    return X13PathCombine( pwd(), "electron", "electronize" );
}

pipeline
{
    agent none
    environment
    {
        DOTNET_CLI_TELEMETRY_OPTOUT = "true"
        DOTNET_NOLOGO = "true"
    }
    parameters
    {
        booleanParam( name: "BuildWindows", defaultValue: true, description: "Should we build for Windows?" );
        booleanParam( name: "BuildLinux", defaultValue: true, description: "Should we build for Linux?" );
        booleanParam( name: "RunUnitTests", defaultValue: true, description: "Should unit tests be run?" );
        booleanParam( name: "BuildDocker", defaultValue: true, description: "Should we build Docker Containers?" );
    }
    options
    {
        skipDefaultCheckout( true );
        timeout( time: 6, unit: 'HOURS' ); // <- Docker can be slow.
        timestamps();
    }
    stages
    {
        stage( "Build x64" )
        {
            parallel
            {
                // ---------------- Windows ----------------

                stage( "Windows" )
                {
                    agent
                    {
                        label "windows && x64";
                    }
                    stages
                    {
                        // Jenkins doesn't seem to like running Docker in
                        // and agent... it just seems to just hang.
                        // https://issues.jenkins.io/browse/JENKINS-59893
                        // Therefore, just run on the Windows agent directly.
                        stage( "clean" )
                        {
                            steps
                            {
                                cleanWs();
                            }
                        }
                        stage( "checkout" )
                        {
                            steps
                            {
                                checkout scm;
                            }
                        }
                        stage( "prepare" )
                        {
                            steps
                            {
                                Prepare();
                            }
                        }
                        stage( "build" )
                        {
                            steps
                            {
                                Build();
                                CallDevops( "--target=dump_version --output=\"${pwd()}\\${GetVersFile()}\"" );
                            }
                        }
                        stage( "unit_test" )
                        {
                            steps
                            {
                                RunUnitTests();
                            }
                            when
                            {
                                expression
                                {
                                    return params.RunUnitTests;
                                }
                            }
                            post
                            {
                                always
                                {
                                    X13ParseMsTestResults(
                                        filePattern: "checkout/TestResults/UnitTests/*.xml",
                                        // Will already abort if the unit tests fail.
                                        abortOnFail: false
                                    );
                                }
                            }
                        }
                        stage( "build_desktop" )
                        {
                            steps
                            {
                                CallDevops( "--target=build_windows --electronize_path=${GetElectronPath()}" );
                                archiveArtifacts "checkout/dist/win/*.exe";
                                archiveArtifacts "checkout/dist/win/*.exe.sha256";
                            }
                        }
                        stage( "build_docker" )
                        {
                            steps
                            {
                                echo "Windows does not support docker buildx command.  No Windows images will currently be made.";
                            }
                            when
                            {
                                expression
                                {
                                    return params.BuildDocker;
                                }
                            }
                        }
                    }
                    when
                    {
                        expression
                        {
                            return params.BuildWindows;
                        }
                    }
                }  // End Windows

                // ---------------- Linux ----------------

                stage( "Linux" )
                {
                    agent
                    {
                        label "ubuntu && docker && x64";
                    }
                    stages
                    {
                        stage( "clean" )
                        {
                            steps
                            {
                                cleanWs();
                            }
                        }
                        stage( "checkout" )
                        {
                            steps
                            {
                                checkout scm;
                            }
                        }
                        stage( "In .NET Docker" )
                        {
                            agent
                            {
                                dockerfile
                                {
                                    filename "linuxbuild.dockerfile";
                                    dir "checkout/Docker";
                                    label "meditu-linux-buildenv";
                                    args "-e HOME='${env.WORKSPACE}'";
                                    reuseNode true;
                                }
                            }
                            stages
                            {
                                stage( "prepare" )
                                {
                                    steps
                                    {
                                        Prepare();
                                    }
                                }
                                stage( "build" )
                                {
                                    steps
                                    {
                                        Build();
                                        CallDevops( "--target=dump_version --output=\"${pwd()}/${GetVersFile()}\"" );
                                        stash includes: GetVersFile(), name: 'version'
                                        archiveArtifacts GetVersFile();
                                    }
                                }
                                stage( "unit_test" )
                                {
                                    steps
                                    {
                                        RunUnitTests();
                                    }
                                    when
                                    {
                                        expression
                                        {
                                            return params.RunUnitTests;
                                        }
                                    }
                                    post
                                    {
                                        always
                                        {
                                            X13ParseMsTestResults(
                                                filePattern: "checkout/TestResults/UnitTests/*.xml",
                                                // Will already abort if the unit tests fail.
                                                abortOnFail: false
                                            );
                                        }
                                    }
                                }
                                stage( "build_desktop" )
                                {
                                    steps
                                    {
                                        CallDevops( "--target=build_linux --electronize_path=${GetElectronPath()}" );
                                        sh "ls -la checkout/dist/linux";
                                        // archiveArtifacts "checkout/dist/linux/*.deb";
                                        //archiveArtifacts "checkout/dist/linux/*.exe.sha256";
                                    }
                                }
                                stage( "build_docker" )
                                {
                                    steps
                                    {
                                        CallDevops( "--target=publish_for_docker" );
                                        CallDevops( "--target=build_docker_linux_x64" );
                                        stash includes: "checkout/Docker/bin/**/*", name: "linux_build";
                                    }
                                    when
                                    {
                                        expression
                                        {
                                            return params.BuildDocker;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    when
                    {
                        expression
                        {
                            return params.BuildLinux;
                        }
                    }
                } // End Linux
            } // End Parallel
        } // End Build x64

        // ---------------- Linux ARM ----------------

        stage( "Linux Arm" )
        {
            agent
            {
                label "arm32 && docker && linux"
            }
            stages
            {
                stage( "clean" )
                {
                    steps
                    {
                        cleanWs();
                    }
                }
                stage( "checkout" )
                {
                    steps
                    {
                        checkout scm;
                        unstash "version";
                        unstash "linux_build";
                    }
                }
                stage( "Build Docker" )
                {
                    steps
                    {
                        sh "cd checkout/Docker && docker buildx build --platform linux/arm/v7,linux/arm/v6 --tag xforever1313/meditu --file server.dockerfile .";
                        sh "docker tag xforever1313/meditu:latest xforever1313/meditu:${GetVersion}";
                    }
                }
            }
            when
            {
                expression
                {
                    return params.BuildLinux && params.BuildDocker;
                }
            }
        }
    }
}
