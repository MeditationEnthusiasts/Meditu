@Library( "X13JenkinsLib" )_

def CallCake( String arguments )
{
    X13Cmd( "${X13PathCombine( "Cake", "dotnet-cake" )} ${X13PathCombine( "checkout", "build.cake" )} ${arguments}" );
}

def CallDevops( String arguments )
{
    X13Cmd( "dotnet ${X13PathCombine( "checkout", "src", "DevOps", "bin", "Debug", "net6.0", "DevOps.dll" )} ${arguments}" );
}

def Prepare()
{
    X13Cmd( "dotnet tool update electronnet.cli --tool-path electron" );
    X13Cmd( "dotnet tool update Cake.Tool --tool-path Cake" );
    CallCake( "--showdescription" );
}

def Build()
{
    CallCake( "--target=build" );
}

def RunUnitTests()
{
    CallDevops( "--target=unit_test" );
}

def GetVersFile()
{
    return "version.txt";
}

def GetVersion()
{
    return readFile( GetVersFile() );
}

def GetElectronPath()
{
    return X13PathCombine( pwd(), "electron", "electronize" );
}

pipeline
{
    agent none
    environment
    {
        DOTNET_CLI_TELEMETRY_OPTOUT = "true"
        DOTNET_NOLOGO = "true"
    }
    parameters
    {
        booleanParam( name: "BuildWindows", defaultValue: true, description: "Should we build for Windows?" );
        booleanParam( name: "BuildLinuxX64", defaultValue: true, description: "Should we build for X64 Linux?" );
        booleanParam( name: "BuildLinuxArm32", defaultValue: true, description: "Should we build for Arm32 Linux?" );
        booleanParam( name: "RunUnitTests", defaultValue: true, description: "Should unit tests be run?" );
        booleanParam( name: "BuildDocker", defaultValue: true, description: "Should we build Docker Containers?" );
    }
    options
    {
        skipDefaultCheckout( true );
        timeout( time: 6, unit: 'HOURS' ); // <- Docker can be slow.
        timestamps();
    }
    stages
    {
        stage( "Build" )
        {
            parallel
            {
                // ---------------- Windows ----------------

                stage( "Windows x64" )
                {
                    agent
                    {
                        label "windows && x64";
                    }
                    stages
                    {
                        // Jenkins doesn't seem to like running Docker in
                        // and agent... it just seems to just hang.
                        // https://issues.jenkins.io/browse/JENKINS-59893
                        // Therefore, just run on the Windows agent directly.
                        stage( "clean" )
                        {
                            steps
                            {
                                cleanWs();
                            }
                        }
                        stage( "checkout" )
                        {
                            steps
                            {
                                checkout scm;
                            }
                        }
                        stage( "prepare" )
                        {
                            steps
                            {
                                Prepare();
                            }
                        }
                        stage( "build" )
                        {
                            steps
                            {
                                Build();
                            }
                        }
                        stage( "unit_test" )
                        {
                            steps
                            {
                                RunUnitTests();
                            }
                            when
                            {
                                expression
                                {
                                    return params.RunUnitTests;
                                }
                            }
                            post
                            {
                                always
                                {
                                    X13ParseMsTestResults(
                                        filePattern: "checkout/TestResults/UnitTests/*.xml",
                                        // Will already abort if the unit tests fail.
                                        abortOnFail: false
                                    );
                                }
                            }
                        }
                        stage( "build_desktop" )
                        {
                            steps
                            {
                                CallDevops( "--target=build_windows --electronize_path=\"${GetElectronPath()}\"" );
                                archiveArtifacts artifacts: "checkout/dist/win/*.exe";
                                archiveArtifacts artifacts: "checkout/dist/win/*.exe.sha256";
                            }
                        }
                        stage( "build_docker" )
                        {
                            steps
                            {
                                CallDevops( "--target=build_docker_windows_x64" );
                            }
                            when
                            {
                                expression
                                {
                                    return params.BuildDocker;
                                }
                            }
                        }

                        // Publish devops so it can be run
                        // and in the publish pipeline without re-building.
                        stage( "publish_devops" )
                        {
                            steps
                            {
                                CallDevops( "--target=devops_publish_windows_x64" );
                                archiveArtifacts artifacts: "checkout\\dist\\devops\\win-x64\\*";
                            }
                        }
                    }
                    when
                    {
                        expression
                        {
                            return params.BuildWindows;
                        }
                    }
                }  // End Windows

                // ---------------- Linux X64 ----------------

                stage( "Linux X64" )
                {
                    agent
                    {
                        label "ubuntu && docker && x64";
                    }
                    stages
                    {
                        stage( "clean" )
                        {
                            steps
                            {
                                cleanWs();
                            }
                        }
                        stage( "checkout" )
                        {
                            steps
                            {
                                checkout scm;
                            }
                        }
                        stage( "In .NET Docker" )
                        {
                            agent
                            {
                                dockerfile
                                {
                                    filename "linuxbuild.dockerfile";
                                    dir "checkout/Docker";
                                    label "meditu-linux-buildenv";
                                    args "-e HOME='${env.WORKSPACE}'";
                                    reuseNode true;
                                }
                            }
                            stages
                            {
                                stage( "prepare" )
                                {
                                    steps
                                    {
                                        Prepare();
                                    }
                                }
                                stage( "build" )
                                {
                                    steps
                                    {
                                        Build();
                                    }
                                }
                                stage( "unit_test" )
                                {
                                    steps
                                    {
                                        RunUnitTests();
                                    }
                                    when
                                    {
                                        expression
                                        {
                                            return runUnitTests;
                                        }
                                    }
                                    post
                                    {
                                        always
                                        {
                                            X13ParseMsTestResults(
                                                filePattern: "checkout/TestResults/UnitTests/*.xml",
                                                // Will already abort if the unit tests fail.
                                                abortOnFail: false
                                            );
                                        }
                                    }
                                }
                                stage( "build_desktop" )
                                {
                                    steps
                                    {
                                        CallDevops( "--target=build_linux --electronize_path=\"${GetElectronPath()}\"" );
                                        sh "ls -la checkout/dist/linux";
                                        // archiveArtifacts artifacts: "checkout/dist/linux/*.deb";
                                        // archiveArtifacts artifacts: "checkout/dist/linux/*.exe.sha256";
                                    }
                                    when
                                    {
                                        expression
                                        {
                                            // Not yet.  Can't get it building on Linux.
                                            return false;
                                        }
                                    }
                                }
                                stage( "build_docker" )
                                {
                                    steps
                                    {
                                        CallDevops( "--target=publish_for_docker" );
                                        CallDevops( "--target=build_docker_linux_x64" );
                                    }
                                    when
                                    {
                                        expression
                                        {
                                            return params.BuildDocker;
                                        }
                                    }
                                }
                                // Publish devops so it can be run on Arm32
                                // and in the publish pipeline.
                                stage( "publish_devops" )
                                {
                                    steps
                                    {
                                        CallDevops( "--target=devops_publish_linux_x64" );
                                        archiveArtifacts artifacts: "checkout/dist/devops/linux-x64/*";
                                    }
                                }
                            }
                        }
                    }
                    when
                    {
                        expression
                        {
                            return params.BuildLinuxX64;
                        }
                    }
                } // End Linux X64

                // ---------------- Linux ARM 32 ----------------

                // Note: Follow the instructions here to enable Raspbian testing.
                // We need some packages in the testing repository to use the dotnet SDK.
                // https://github.com/dotnet/dotnet-docker/issues/3253
                stage( "Linux Arm32" )
                {
                    agent
                    {
                        label "arm32 && docker && linux"
                    }
                    stages
                    {
                        stage( "clean" )
                        {
                            steps
                            {
                                cleanWs();
                            }
                        }
                        stage( "checkout" )
                        {
                            steps
                            {
                                checkout scm;
                            }
                        }
                        stage( "In .NET Docker" )
                        {
                            agent
                            {
                                docker
                                {
                                    image "mcr.microsoft.com/dotnet/sdk:6.0";
                                    args "-e HOME='${env.WORKSPACE}'";
                                    reuseNode true;
                                }
                            }
                            stages
                            {
                                stage( "prepare" )
                                {
                                    steps
                                    {
                                        Prepare();
                                    }
                                }
                                stage( "build" )
                                {
                                    steps
                                    {
                                        Build();
                                    }
                                }
                                stage( "unit_test" )
                                {
                                    steps
                                    {
                                        RunUnitTests();
                                    }
                                    when
                                    {
                                        expression
                                        {
                                            return runUnitTests;
                                        }
                                    }
                                    post
                                    {
                                        always
                                        {
                                            X13ParseMsTestResults(
                                                filePattern: "checkout/TestResults/UnitTests/*.xml",
                                                // Will already abort if the unit tests fail.
                                                abortOnFail: false
                                            );
                                        }
                                    }
                                }
                                stage( "build_desktop" )
                                {
                                    steps
                                    {
                                        CallDevops( "--target=build_linux --electronize_path=\"${GetElectronPath()}\"" );
                                        sh "ls -la checkout/dist/linux";
                                        // archiveArtifacts artifacts: "checkout/dist/linux/*.deb";
                                        // archiveArtifacts artifacts: "checkout/dist/linux/*.exe.sha256";
                                    }
                                    when
                                    {
                                        expression
                                        {
                                            // Don't support ARM yet for desktop application.
                                            return false;
                                        }
                                    }
                                }
                                stage( "build_docker" )
                                {
                                    steps
                                    {
                                        CallDevops( "--target=publish_for_docker" );
                                        CallDevops( "--target=build_docker_linux_arm32" );
                                    }
                                    when
                                    {
                                        expression
                                        {
                                            return params.BuildDocker;
                                        }
                                    }
                                }
                                stage( "publish_devops" )
                                {
                                    steps
                                    {
                                        CallDevops( "--target=devops_publish_linux_arm32" );
                                        archiveArtifacts artifacts: "checkout/dist/devops/linux-arm32/*";
                                    }
                                }
                            }
                        }
                    }
                    when
                    {
                        expression
                        {
                            return params.BuildLinuxArm32;
                        }
                    }
                } // End Linux Arm32
            } // End Parallel
        } // End Build
    }
} // End Pipeline
