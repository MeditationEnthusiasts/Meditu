@Library( "X13JenkinsLib" )_

def DockerPush()
{
    copyArtifacts(
        projectName: "Meditu/Build And Test",
        filter: "version.txt"
    );

    X13DockerLogin(
        credsId: "dockerhub"
    );

    X13Cmd( "docker push xforever1313/meditu:latest" );
    X13Cmd( "docker push xforever1313/meditu:${GetVersion()}" );
}

def GetVersFile()
{
    return "version.txt";
}

def GetVersion()
{
    return readFile( GetVersFile() );
}

pipeline
{
    agent none
    environment
    {
        DOTNET_CLI_TELEMETRY_OPTOUT = "true"
        DOTNET_NOLOGO = "true"
    }
    parameters
    {
        booleanParam( name: "DeployDocker", defaultValue: true, description: "Should we deploy docker containers?" );
    }
    options
    {
        skipDefaultCheckout( true );
        timeout( time: 1, unit: 'HOURS' ); // <- Docker can be slow.
        timestamps();
    }
    stages
    {
        stage( "Deploy Docker" )
        {
            parallel
            {
                // ---------------- Windows ----------------

                stage( "Windows" )
                {
                    agent
                    {
                        label "windows && docker && x64";
                    }
                    stages
                    {
                        stage( "clean" )
                        {
                            steps
                            {
                                cleanWs();
                            }
                        }
                        stage( "Docker Push" )
                        {
                            steps
                            {
                                DockerPush();
                            }
                        }
                    }
                    when
                    {
                        expression
                        {
                            // No docker image on Windows yet...
                            return false;
                        }
                    }
                }

                stage( "Linux X64" )
                {
                    agent
                    {
                        label "ubuntu && docker && x64";
                    }
                    stages
                    {
                        stage( "clean" )
                        {
                            steps
                            {
                                cleanWs();
                            }
                        }
                        stage( "Docker Push" )
                        {
                            steps
                            {
                                DockerPush();
                            }
                        }
                    }
                }

                // Need to do the following if on an older
                // version of Raspbian:
                // https://github.com/dotnet/dotnet-docker/issues/3253
                stage( "Linux Arm32" )
                {
                    agent
                    {
                        label "arm32 && docker && linux";
                    }
                    stages
                    {
                        stage( "clean" )
                        {
                            steps
                            {
                                cleanWs();
                            }
                        }
                        stage( "Docker Push" )
                        {
                            steps
                            {
                                DockerPush();
                            }
                        }
                    }
                }
            }
            expression
            {
                return params.DeployDocker;
            }
        }
    }
}
